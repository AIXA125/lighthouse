// @ts-nocheck
// generated by yarn build-cdt-lib
/* eslint-disable */
"use strict";
// Copyright 2022 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSyntheticUserTimingTraceEvent = exports.isTraceEventMainFrameViewport = exports.isTraceEventNavigationStartWithURL = exports.isTraceEventPrePaint = exports.isSyntheticNetworkRequestDetailsEvent = exports.isTraceEventResourceReceivedData = exports.isTraceEventResourceWillSendRequest = exports.isTraceEventResourceFinish = exports.isTraceEventResourceReceiveResponse = exports.isTraceEventResourceSendRequest = exports.isTraceEventProfileChunk = exports.isTraceEventProfile = exports.isTraceEventGPUTask = exports.isTraceEventEventTimingStart = exports.isTraceEventEventTimingEnd = exports.isTraceEventEventTiming = exports.isTraceEventInteractiveTime = exports.isTraceEventMarkDOMContent = exports.isTraceEventFirstPaint = exports.isTraceEventMarkLoad = exports.isTraceEventLargestTextPaintCandidate = exports.isTraceEventLargestImagePaintCandidate = exports.isTraceEventLargestContentfulPaintCandidate = exports.isTraceEventFirstContentfulPaint = exports.isTraceEventStyleRecalcInvalidation = exports.isTraceEventLayoutInvalidation = exports.isTraceEventLayoutShift = exports.isTraceEventAnimation = exports.isTraceEventNavigationStart = exports.isTraceEventCommitLoad = exports.isTraceEventFrameCommittedInBrowser = exports.isTraceEventTracingStartedInBrowser = exports.isProcessName = exports.isThreadName = exports.isTraceEventRendererEvent = exports.isTraceEventInstant = exports.isTraceEventDispatch = exports.isTraceEventComplete = exports.ThreadID = exports.ProcessID = exports.CallFrameID = exports.ProfileID = exports.isSyntheticInteractionEvent = exports.StyleRecalcInvalidationReason = exports.LayoutInvalidationReason = exports.TraceEventScope = exports.isFlowPhase = exports.isAsyncPhase = exports.isNestableAsyncPhase = exports.Phase = void 0;
exports.isSyntheticLayoutShift = exports.isTraceEventAsyncPhase = exports.isTraceEventTimeStamp = exports.isTraceEventConsoleTime = exports.isTraceEventPerformanceMark = exports.isTraceEventPerformanceMeasure = exports.isSyntheticConsoleTimingTraceEvent = void 0;
// Trace Events.
var Phase;
(function (Phase) {
    // Standard
    Phase["BEGIN"] = "B";
    Phase["END"] = "E";
    Phase["COMPLETE"] = "X";
    Phase["INSTANT"] = "I";
    Phase["COUNTER"] = "C";
    // Async
    Phase["ASYNC_NESTABLE_START"] = "b";
    Phase["ASYNC_NESTABLE_INSTANT"] = "n";
    Phase["ASYNC_NESTABLE_END"] = "e";
    Phase["ASYNC_STEP_INTO"] = "T";
    Phase["ASYNC_BEGIN"] = "S";
    Phase["ASYNC_END"] = "F";
    Phase["ASYNC_STEP_PAST"] = "p";
    // Flow
    Phase["FLOW_START"] = "s";
    Phase["FLOW_STEP"] = "t";
    Phase["FLOW_END"] = "f";
    // Sample
    Phase["SAMPLE"] = "P";
    // Object
    Phase["OBJECT_CREATED"] = "N";
    Phase["OBJECT_SNAPSHOT"] = "O";
    Phase["OBJECT_DESTROYED"] = "D";
    // Metadata
    Phase["METADATA"] = "M";
    // Memory Dump
    Phase["MEMORY_DUMP_GLOBAL"] = "V";
    Phase["MEMORY_DUMP_PROCESS"] = "v";
    // Mark
    Phase["MARK"] = "R";
    // Clock sync
    Phase["CLOCK_SYNC"] = "c";
})(Phase = exports.Phase || (exports.Phase = {}));
function isNestableAsyncPhase(phase) {
    return phase === Phase.ASYNC_NESTABLE_START || phase === Phase.ASYNC_NESTABLE_END ||
        phase === Phase.ASYNC_NESTABLE_INSTANT;
}
exports.isNestableAsyncPhase = isNestableAsyncPhase;
function isAsyncPhase(phase) {
    return isNestableAsyncPhase(phase) || phase === Phase.ASYNC_BEGIN || phase === Phase.ASYNC_STEP_INTO ||
        phase === Phase.ASYNC_END || phase === Phase.ASYNC_STEP_PAST;
}
exports.isAsyncPhase = isAsyncPhase;
function isFlowPhase(phase) {
    return phase === Phase.FLOW_START || phase === Phase.FLOW_STEP || phase === Phase.FLOW_END;
}
exports.isFlowPhase = isFlowPhase;
var TraceEventScope;
(function (TraceEventScope) {
    TraceEventScope["THREAD"] = "t";
    TraceEventScope["PROCESS"] = "p";
    TraceEventScope["GLOBAL"] = "g";
})(TraceEventScope = exports.TraceEventScope || (exports.TraceEventScope = {}));
var LayoutInvalidationReason;
(function (LayoutInvalidationReason) {
    LayoutInvalidationReason["SIZE_CHANGED"] = "Size changed";
    LayoutInvalidationReason["ATTRIBUTE"] = "Attribute";
    LayoutInvalidationReason["ADDED_TO_LAYOUT"] = "Added to layout";
    LayoutInvalidationReason["SCROLLBAR_CHANGED"] = "Scrollbar changed";
    LayoutInvalidationReason["REMOVED_FROM_LAYOUT"] = "Removed from layout";
    LayoutInvalidationReason["STYLE_CHANGED"] = "Style changed";
    LayoutInvalidationReason["FONTS_CHANGED"] = "Fonts changed";
    LayoutInvalidationReason["UNKNOWN"] = "Unknown";
})(LayoutInvalidationReason = exports.LayoutInvalidationReason || (exports.LayoutInvalidationReason = {}));
var StyleRecalcInvalidationReason;
(function (StyleRecalcInvalidationReason) {
    StyleRecalcInvalidationReason["ANIMATION"] = "Animation";
})(StyleRecalcInvalidationReason = exports.StyleRecalcInvalidationReason || (exports.StyleRecalcInvalidationReason = {}));
function isSyntheticInteractionEvent(event) {
    return Boolean('interactionId' in event && event.args?.data && 'beginEvent' in event.args.data && 'endEvent' in event.args.data);
}
exports.isSyntheticInteractionEvent = isSyntheticInteractionEvent;
class ProfileIdTag {
    #profileIdTag;
}
// eslint-disable-next-line @typescript-eslint/naming-convention
function ProfileID(value) {
    return value;
}
exports.ProfileID = ProfileID;
class CallFrameIdTag {
    #callFrameIdTag;
}
// eslint-disable-next-line @typescript-eslint/naming-convention
function CallFrameID(value) {
    return value;
}
exports.CallFrameID = CallFrameID;
class ProcessIdTag {
    #processIdTag;
}
// eslint-disable-next-line @typescript-eslint/naming-convention
function ProcessID(value) {
    return value;
}
exports.ProcessID = ProcessID;
class ThreadIdTag {
    #threadIdTag;
}
// eslint-disable-next-line @typescript-eslint/naming-convention
function ThreadID(value) {
    return value;
}
exports.ThreadID = ThreadID;
function isTraceEventComplete(event) {
    return event.ph === Phase.COMPLETE;
}
exports.isTraceEventComplete = isTraceEventComplete;
function isTraceEventDispatch(event) {
    return event.name === 'EventDispatch';
}
exports.isTraceEventDispatch = isTraceEventDispatch;
function isTraceEventInstant(event) {
    return event.ph === Phase.INSTANT;
}
exports.isTraceEventInstant = isTraceEventInstant;
function isTraceEventRendererEvent(event) {
    return isTraceEventInstant(event) || isTraceEventComplete(event);
}
exports.isTraceEventRendererEvent = isTraceEventRendererEvent;
function isThreadName(traceEventData) {
    return traceEventData.name === 'thread_name';
}
exports.isThreadName = isThreadName;
function isProcessName(traceEventData) {
    return traceEventData.name === 'process_name';
}
exports.isProcessName = isProcessName;
function isTraceEventTracingStartedInBrowser(traceEventData) {
    return traceEventData.name === 'TracingStartedInBrowser';
}
exports.isTraceEventTracingStartedInBrowser = isTraceEventTracingStartedInBrowser;
function isTraceEventFrameCommittedInBrowser(traceEventData) {
    return traceEventData.name === 'FrameCommittedInBrowser';
}
exports.isTraceEventFrameCommittedInBrowser = isTraceEventFrameCommittedInBrowser;
function isTraceEventCommitLoad(traceEventData) {
    return traceEventData.name === 'CommitLoad';
}
exports.isTraceEventCommitLoad = isTraceEventCommitLoad;
function isTraceEventNavigationStart(traceEventData) {
    return traceEventData.name === 'navigationStart';
}
exports.isTraceEventNavigationStart = isTraceEventNavigationStart;
function isTraceEventAnimation(traceEventData) {
    return traceEventData.name === 'Animation';
}
exports.isTraceEventAnimation = isTraceEventAnimation;
function isTraceEventLayoutShift(traceEventData) {
    return traceEventData.name === 'LayoutShift';
}
exports.isTraceEventLayoutShift = isTraceEventLayoutShift;
function isTraceEventLayoutInvalidation(traceEventData) {
    return traceEventData.name === 'LayoutInvalidationTracking' ||
        traceEventData.name === 'ScheduleStyleInvalidationTracking';
}
exports.isTraceEventLayoutInvalidation = isTraceEventLayoutInvalidation;
function isTraceEventStyleRecalcInvalidation(traceEventData) {
    return traceEventData.name === 'StyleRecalcInvalidationTracking';
}
exports.isTraceEventStyleRecalcInvalidation = isTraceEventStyleRecalcInvalidation;
function isTraceEventFirstContentfulPaint(traceEventData) {
    return traceEventData.name === 'firstContentfulPaint';
}
exports.isTraceEventFirstContentfulPaint = isTraceEventFirstContentfulPaint;
function isTraceEventLargestContentfulPaintCandidate(traceEventData) {
    return traceEventData.name === 'largestContentfulPaint::Candidate';
}
exports.isTraceEventLargestContentfulPaintCandidate = isTraceEventLargestContentfulPaintCandidate;
function isTraceEventLargestImagePaintCandidate(traceEventData) {
    return traceEventData.name === 'LargestImagePaint::Candidate';
}
exports.isTraceEventLargestImagePaintCandidate = isTraceEventLargestImagePaintCandidate;
function isTraceEventLargestTextPaintCandidate(traceEventData) {
    return traceEventData.name === 'LargestTextPaint::Candidate';
}
exports.isTraceEventLargestTextPaintCandidate = isTraceEventLargestTextPaintCandidate;
function isTraceEventMarkLoad(traceEventData) {
    return traceEventData.name === 'MarkLoad';
}
exports.isTraceEventMarkLoad = isTraceEventMarkLoad;
function isTraceEventFirstPaint(traceEventData) {
    return traceEventData.name === 'firstPaint';
}
exports.isTraceEventFirstPaint = isTraceEventFirstPaint;
function isTraceEventMarkDOMContent(traceEventData) {
    return traceEventData.name === 'MarkDOMContent';
}
exports.isTraceEventMarkDOMContent = isTraceEventMarkDOMContent;
function isTraceEventInteractiveTime(traceEventData) {
    return traceEventData.name === 'InteractiveTime';
}
exports.isTraceEventInteractiveTime = isTraceEventInteractiveTime;
function isTraceEventEventTiming(traceEventData) {
    return traceEventData.name === 'EventTiming';
}
exports.isTraceEventEventTiming = isTraceEventEventTiming;
function isTraceEventEventTimingEnd(traceEventData) {
    return isTraceEventEventTiming(traceEventData) && traceEventData.ph === Phase.ASYNC_NESTABLE_END;
}
exports.isTraceEventEventTimingEnd = isTraceEventEventTimingEnd;
function isTraceEventEventTimingStart(traceEventData) {
    return isTraceEventEventTiming(traceEventData) && traceEventData.ph === Phase.ASYNC_NESTABLE_START;
}
exports.isTraceEventEventTimingStart = isTraceEventEventTimingStart;
function isTraceEventGPUTask(traceEventData) {
    return traceEventData.name === 'GPUTask';
}
exports.isTraceEventGPUTask = isTraceEventGPUTask;
function isTraceEventProfile(traceEventData) {
    return traceEventData.name === 'Profile';
}
exports.isTraceEventProfile = isTraceEventProfile;
function isTraceEventProfileChunk(traceEventData) {
    return traceEventData.name === 'ProfileChunk';
}
exports.isTraceEventProfileChunk = isTraceEventProfileChunk;
function isTraceEventResourceSendRequest(traceEventData) {
    return traceEventData.name === 'ResourceSendRequest';
}
exports.isTraceEventResourceSendRequest = isTraceEventResourceSendRequest;
function isTraceEventResourceReceiveResponse(traceEventData) {
    return traceEventData.name === 'ResourceReceiveResponse';
}
exports.isTraceEventResourceReceiveResponse = isTraceEventResourceReceiveResponse;
function isTraceEventResourceFinish(traceEventData) {
    return traceEventData.name === 'ResourceFinish';
}
exports.isTraceEventResourceFinish = isTraceEventResourceFinish;
function isTraceEventResourceWillSendRequest(traceEventData) {
    return traceEventData.name === 'ResourceWillSendRequest';
}
exports.isTraceEventResourceWillSendRequest = isTraceEventResourceWillSendRequest;
function isTraceEventResourceReceivedData(traceEventData) {
    return traceEventData.name === 'ResourceReceivedData';
}
exports.isTraceEventResourceReceivedData = isTraceEventResourceReceivedData;
function isSyntheticNetworkRequestDetailsEvent(traceEventData) {
    return traceEventData.name === 'SyntheticNetworkRequest';
}
exports.isSyntheticNetworkRequestDetailsEvent = isSyntheticNetworkRequestDetailsEvent;
function isTraceEventPrePaint(traceEventData) {
    return traceEventData.name === 'PrePaint';
}
exports.isTraceEventPrePaint = isTraceEventPrePaint;
function isTraceEventNavigationStartWithURL(event) {
    return Boolean(isTraceEventNavigationStart(event) && event.args.data && event.args.data.documentLoaderURL !== '');
}
exports.isTraceEventNavigationStartWithURL = isTraceEventNavigationStartWithURL;
function isTraceEventMainFrameViewport(traceEventData) {
    return traceEventData.name === 'PaintTimingVisualizer::Viewport';
}
exports.isTraceEventMainFrameViewport = isTraceEventMainFrameViewport;
function isSyntheticUserTimingTraceEvent(traceEventData) {
    if (traceEventData.cat !== 'blink.user_timing') {
        return false;
    }
    const data = traceEventData.args?.data;
    if (!data) {
        return false;
    }
    return 'beginEvent' in data && 'endEvent' in data;
}
exports.isSyntheticUserTimingTraceEvent = isSyntheticUserTimingTraceEvent;
function isSyntheticConsoleTimingTraceEvent(traceEventData) {
    if (traceEventData.cat !== 'blink.console') {
        return false;
    }
    const data = traceEventData.args?.data;
    if (!data) {
        return false;
    }
    return 'beginEvent' in data && 'endEvent' in data;
}
exports.isSyntheticConsoleTimingTraceEvent = isSyntheticConsoleTimingTraceEvent;
function isTraceEventPerformanceMeasure(traceEventData) {
    return isTraceEventAsyncPhase(traceEventData) && traceEventData.cat === 'blink.user_timing';
}
exports.isTraceEventPerformanceMeasure = isTraceEventPerformanceMeasure;
function isTraceEventPerformanceMark(traceEventData) {
    return traceEventData.ph === Phase.MARK && traceEventData.cat === 'blink.user_timing';
}
exports.isTraceEventPerformanceMark = isTraceEventPerformanceMark;
function isTraceEventConsoleTime(traceEventData) {
    return isTraceEventAsyncPhase(traceEventData) && traceEventData.cat === 'blink.console';
}
exports.isTraceEventConsoleTime = isTraceEventConsoleTime;
function isTraceEventTimeStamp(traceEventData) {
    return traceEventData.ph === Phase.INSTANT && traceEventData.name === 'TimeStamp';
}
exports.isTraceEventTimeStamp = isTraceEventTimeStamp;
function isTraceEventAsyncPhase(traceEventData) {
    const asyncPhases = new Set([
        Phase.ASYNC_NESTABLE_START,
        Phase.ASYNC_NESTABLE_INSTANT,
        Phase.ASYNC_NESTABLE_END,
        Phase.ASYNC_STEP_INTO,
        Phase.ASYNC_BEGIN,
        Phase.ASYNC_END,
        Phase.ASYNC_STEP_PAST,
    ]);
    return asyncPhases.has(traceEventData.ph);
}
exports.isTraceEventAsyncPhase = isTraceEventAsyncPhase;
function isSyntheticLayoutShift(traceEventData) {
    if (!isTraceEventLayoutShift(traceEventData) || !traceEventData.args.data) {
        return false;
    }
    return 'rawEvent' in traceEventData.args.data;
}
exports.isSyntheticLayoutShift = isSyntheticLayoutShift;

