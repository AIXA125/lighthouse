// @ts-nocheck
// generated by yarn build-cdt-lib
/* eslint-disable */
"use strict";
// Copyright 2022 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
Object.defineProperty(exports, "__esModule", { value: true });
exports.KNOWN_EVENTS = exports.KnownEventName = exports.EventCategory = exports.HandlerState = void 0;
var HandlerState;
(function (HandlerState) {
    HandlerState[HandlerState["UNINITIALIZED"] = 1] = "UNINITIALIZED";
    HandlerState[HandlerState["INITIALIZED"] = 2] = "INITIALIZED";
    HandlerState[HandlerState["FINALIZED"] = 3] = "FINALIZED";
})(HandlerState = exports.HandlerState || (exports.HandlerState = {}));
var EventCategory;
(function (EventCategory) {
    EventCategory["Parse"] = "Parse";
    EventCategory["V8"] = "V8";
    EventCategory["Js"] = "Js";
    EventCategory["Gc"] = "Gc";
    EventCategory["Layout"] = "Layout";
    EventCategory["Paint"] = "Paint";
    EventCategory["Load"] = "Load";
    EventCategory["Other"] = "Other";
})(EventCategory = exports.EventCategory || (exports.EventCategory = {}));
var KnownEventName;
(function (KnownEventName) {
    /* Task/Other */
    KnownEventName["Program"] = "Program";
    KnownEventName["RunTask"] = "RunTask";
    KnownEventName["AsyncTask"] = "AsyncTask";
    /* Load */
    KnownEventName["XHRLoad"] = "XHRLoad";
    KnownEventName["XHRReadyStateChange"] = "XHRReadyStateChange";
    /* Parse */
    KnownEventName["ParseHTML"] = "ParseHTML";
    KnownEventName["ParseCSS"] = "ParseAuthorStyleSheet";
    /* V8 */
    KnownEventName["CompileScript"] = "V8.CompileScript";
    KnownEventName["CompileCode"] = "V8.CompileCode";
    KnownEventName["CompileModule"] = "V8.CompileModule";
    KnownEventName["Optimize"] = "V8.OptimizeCode";
    KnownEventName["WasmStreamFromResponseCallback"] = "v8.wasm.streamFromResponseCallback";
    KnownEventName["WasmCompiledModule"] = "v8.wasm.compiledModule";
    KnownEventName["WasmCachedModule"] = "v8.wasm.cachedModule";
    KnownEventName["WasmModuleCacheHit"] = "v8.wasm.moduleCacheHit";
    KnownEventName["WasmModuleCacheInvalid"] = "v8.wasm.moduleCacheInvalid";
    /* Js */
    KnownEventName["RunMicrotasks"] = "RunMicrotasks";
    KnownEventName["EvaluateScript"] = "EvaluateScript";
    KnownEventName["FunctionCall"] = "FunctionCall";
    KnownEventName["EventDispatch"] = "EventDispatch";
    KnownEventName["RequestMainThreadFrame"] = "RequestMainThreadFrame";
    KnownEventName["RequestAnimationFrame"] = "RequestAnimationFrame";
    KnownEventName["CancelAnimationFrame"] = "CancelAnimationFrame";
    KnownEventName["FireAnimationFrame"] = "FireAnimationFrame";
    KnownEventName["RequestIdleCallback"] = "RequestIdleCallback";
    KnownEventName["CancelIdleCallback"] = "CancelIdleCallback";
    KnownEventName["FireIdleCallback"] = "FireIdleCallback";
    KnownEventName["TimerInstall"] = "TimerInstall";
    KnownEventName["TimerRemove"] = "TimerRemove";
    KnownEventName["TimerFire"] = "TimerFire";
    KnownEventName["WebSocketCreate"] = "WebSocketCreate";
    KnownEventName["WebSocketSendHandshake"] = "WebSocketSendHandshakeRequest";
    KnownEventName["WebSocketReceiveHandshake"] = "WebSocketReceiveHandshakeResponse";
    KnownEventName["WebSocketDestroy"] = "WebSocketDestroy";
    KnownEventName["CryptoDoEncrypt"] = "DoEncrypt";
    KnownEventName["CryptoDoEncryptReply"] = "DoEncryptReply";
    KnownEventName["CryptoDoDecrypt"] = "DoDecrypt";
    KnownEventName["CryptoDoDecryptReply"] = "DoDecryptReply";
    KnownEventName["CryptoDoDigest"] = "DoDigest";
    KnownEventName["CryptoDoDigestReply"] = "DoDigestReply";
    KnownEventName["CryptoDoSign"] = "DoSign";
    KnownEventName["CryptoDoSignReply"] = "DoSignReply";
    KnownEventName["CryptoDoVerify"] = "DoVerify";
    KnownEventName["CryptoDoVerifyReply"] = "DoVerifyReply";
    /* Gc */
    KnownEventName["GC"] = "GCEvent";
    KnownEventName["DOMGC"] = "BlinkGC.AtomicPhase";
    KnownEventName["IncrementalGCMarking"] = "V8.GCIncrementalMarking";
    KnownEventName["MajorGC"] = "MajorGC";
    KnownEventName["MinorGC"] = "MinorGC";
    /* Layout (a.k.a "Rendering") */
    KnownEventName["ScheduleStyleRecalculation"] = "ScheduleStyleRecalculation";
    KnownEventName["RecalculateStyles"] = "RecalculateStyles";
    KnownEventName["Layout"] = "Layout";
    KnownEventName["UpdateLayoutTree"] = "UpdateLayoutTree";
    KnownEventName["InvalidateLayout"] = "InvalidateLayout";
    KnownEventName["LayoutInvalidationTracking"] = "LayoutInvalidationTracking";
    KnownEventName["ComputeIntersections"] = "ComputeIntersections";
    KnownEventName["HitTest"] = "HitTest";
    KnownEventName["PrePaint"] = "PrePaint";
    /* Paint */
    KnownEventName["ScrollLayer"] = "ScrollLayer";
    KnownEventName["UpdateLayer"] = "UpdateLayer";
    KnownEventName["PaintSetup"] = "PaintSetup";
    KnownEventName["Paint"] = "Paint";
    KnownEventName["PaintImage"] = "PaintImage";
    KnownEventName["Commit"] = "Commit";
    KnownEventName["CompositeLayers"] = "CompositeLayers";
    KnownEventName["RasterTask"] = "RasterTask";
    KnownEventName["ImageDecodeTask"] = "ImageDecodeTask";
    KnownEventName["ImageUploadTask"] = "ImageUploadTask";
    KnownEventName["DecodeImage"] = "Decode Image";
    KnownEventName["ResizeImage"] = "Resize Image";
    KnownEventName["DrawLazyPixelRef"] = "Draw LazyPixelRef";
    KnownEventName["DecodeLazyPixelRef"] = "Decode LazyPixelRef";
    KnownEventName["GPUTask"] = "GPUTask";
})(KnownEventName = exports.KnownEventName || (exports.KnownEventName = {}));
exports.KNOWN_EVENTS = new Map([
    /* Task/Other */
    [KnownEventName.Program, { category: EventCategory.Other, label: 'Other' }],
    [KnownEventName.RunTask, { category: EventCategory.Other, label: 'Run Task' }],
    [KnownEventName.AsyncTask, { category: EventCategory.Other, label: 'Async Task' }],
    /* Load */
    [KnownEventName.XHRLoad, { category: EventCategory.Load, label: 'Load' }],
    [KnownEventName.XHRReadyStateChange, { category: EventCategory.Load, label: 'ReadyStateChange' }],
    /* Parse */
    [KnownEventName.ParseHTML, { category: EventCategory.Parse, label: 'Parse HTML' }],
    [KnownEventName.ParseCSS, { category: EventCategory.Parse, label: 'Parse StyleSheet' }],
    /* V8 */
    [KnownEventName.CompileScript, { category: EventCategory.V8, label: 'Compile Script' }],
    [KnownEventName.CompileCode, { category: EventCategory.V8, label: 'Compile Code' }],
    [KnownEventName.CompileModule, { category: EventCategory.V8, label: 'Compile Module' }],
    [KnownEventName.Optimize, { category: EventCategory.V8, label: 'Optimize' }],
    [KnownEventName.WasmStreamFromResponseCallback, { category: EventCategory.Js, label: 'Streaming Wasm Response' }],
    [KnownEventName.WasmCompiledModule, { category: EventCategory.Js, label: 'Compiled Wasm Module' }],
    [KnownEventName.WasmCachedModule, { category: EventCategory.Js, label: 'Cached Wasm Module' }],
    [KnownEventName.WasmModuleCacheHit, { category: EventCategory.Js, label: 'Wasm Module Cache Hit' }],
    [KnownEventName.WasmModuleCacheInvalid, { category: EventCategory.Js, label: 'Wasm Module Cache Invalid' }],
    /* Js */
    [KnownEventName.RunMicrotasks, { category: EventCategory.Js, label: 'Run Microtasks' }],
    [KnownEventName.EvaluateScript, { category: EventCategory.Js, label: 'Evaluate Script' }],
    [KnownEventName.FunctionCall, { category: EventCategory.Js, label: 'Function Call' }],
    [KnownEventName.EventDispatch, { category: EventCategory.Js, label: 'Event' }],
    [KnownEventName.RequestMainThreadFrame, { category: EventCategory.Js, label: 'Request Main Thread Frame' }],
    [KnownEventName.RequestAnimationFrame, { category: EventCategory.Js, label: 'Request Animation Frame' }],
    [KnownEventName.CancelAnimationFrame, { category: EventCategory.Js, label: 'Cancel Animation Frame' }],
    [KnownEventName.FireAnimationFrame, { category: EventCategory.Js, label: 'Animation Frame' }],
    [KnownEventName.RequestIdleCallback, { category: EventCategory.Js, label: 'Request Idle Callback' }],
    [KnownEventName.CancelIdleCallback, { category: EventCategory.Js, label: 'Cancel Idle Callback' }],
    [KnownEventName.FireIdleCallback, { category: EventCategory.Js, label: 'Idle Callback' }],
    [KnownEventName.TimerInstall, { category: EventCategory.Js, label: 'Timer Installed' }],
    [KnownEventName.TimerRemove, { category: EventCategory.Js, label: 'Timer Removed' }],
    [KnownEventName.TimerFire, { category: EventCategory.Js, label: 'Timer Fired' }],
    [KnownEventName.WebSocketCreate, { category: EventCategory.Js, label: 'Create WebSocket' }],
    [KnownEventName.WebSocketSendHandshake, { category: EventCategory.Js, label: 'Send WebSocket Handshake' }],
    [KnownEventName.WebSocketReceiveHandshake, { category: EventCategory.Js, label: 'Receive WebSocket Handshake' }],
    [KnownEventName.WebSocketDestroy, { category: EventCategory.Js, label: 'Destroy WebSocket' }],
    [KnownEventName.CryptoDoEncrypt, { category: EventCategory.Js, label: 'Crypto Encrypt' }],
    [KnownEventName.CryptoDoEncryptReply, { category: EventCategory.Js, label: 'Crypto Encrypt Reply' }],
    [KnownEventName.CryptoDoDecrypt, { category: EventCategory.Js, label: 'Crypto Decrypt' }],
    [KnownEventName.CryptoDoDecryptReply, { category: EventCategory.Js, label: 'Crypto Decrypt Reply' }],
    [KnownEventName.CryptoDoDigest, { category: EventCategory.Js, label: 'Crypto Digest' }],
    [KnownEventName.CryptoDoDigestReply, { category: EventCategory.Js, label: 'Crypto Digest Reply' }],
    [KnownEventName.CryptoDoSign, { category: EventCategory.Js, label: 'Crypto Sign' }],
    [KnownEventName.CryptoDoSignReply, { category: EventCategory.Js, label: 'Crypto Sign Reply' }],
    [KnownEventName.CryptoDoVerify, { category: EventCategory.Js, label: 'Crypto Verify' }],
    [KnownEventName.CryptoDoVerifyReply, { category: EventCategory.Js, label: 'Crypto Verify Reply' }],
    /* Gc */
    [KnownEventName.GC, { category: EventCategory.Gc, label: 'GC' }],
    [KnownEventName.DOMGC, { category: EventCategory.Gc, label: 'DOM GC' }],
    [KnownEventName.IncrementalGCMarking, { category: EventCategory.Gc, label: 'Incremental GC' }],
    [KnownEventName.MajorGC, { category: EventCategory.Gc, label: 'Major GC' }],
    [KnownEventName.MinorGC, { category: EventCategory.Gc, label: 'Minor GC' }],
    /* Layout (a.k.a "Rendering") */
    [KnownEventName.ScheduleStyleRecalculation, { category: EventCategory.Layout, label: 'Schedule Recalculate Style' }],
    [KnownEventName.RecalculateStyles, { category: EventCategory.Layout, label: 'Recalculate Style' }],
    [KnownEventName.Layout, { category: EventCategory.Layout, label: 'Layout' }],
    [KnownEventName.UpdateLayoutTree, { category: EventCategory.Layout, label: 'Recalculate Style' }],
    [KnownEventName.InvalidateLayout, { category: EventCategory.Layout, label: 'Invalidate Layout' }],
    [KnownEventName.LayoutInvalidationTracking, { category: EventCategory.Layout, label: 'Layout Invalidation' }],
    [KnownEventName.ComputeIntersections, { category: EventCategory.Paint, label: 'Compute Intersections' }],
    [KnownEventName.HitTest, { category: EventCategory.Layout, label: 'Hit Test' }],
    [KnownEventName.PrePaint, { category: EventCategory.Layout, label: 'Pre-Paint' }],
    /* Paint */
    [KnownEventName.ScrollLayer, { category: EventCategory.Paint, label: 'Scroll' }],
    [KnownEventName.UpdateLayer, { category: EventCategory.Paint, label: 'Update Layer' }],
    [KnownEventName.PaintSetup, { category: EventCategory.Paint, label: 'Paint Setup' }],
    [KnownEventName.Paint, { category: EventCategory.Paint, label: 'Paint' }],
    [KnownEventName.PaintImage, { category: EventCategory.Paint, label: 'Paint Image' }],
    [KnownEventName.Commit, { category: EventCategory.Paint, label: 'Commit' }],
    [KnownEventName.CompositeLayers, { category: EventCategory.Paint, label: 'Composite Layers' }],
    [KnownEventName.RasterTask, { category: EventCategory.Paint, label: 'Raster' }],
    [KnownEventName.ImageDecodeTask, { category: EventCategory.Paint, label: 'Decode Image Task' }],
    [KnownEventName.ImageUploadTask, { category: EventCategory.Paint, label: 'Upload Image Task' }],
    [KnownEventName.DecodeImage, { category: EventCategory.Paint, label: 'Decode Image' }],
    [KnownEventName.ResizeImage, { category: EventCategory.Paint, label: 'Resize Image' }],
    [KnownEventName.DrawLazyPixelRef, { category: EventCategory.Paint, label: 'Draw LazyPixelRef' }],
    [KnownEventName.DecodeLazyPixelRef, { category: EventCategory.Paint, label: 'Decode LazyPixelRef' }],
    [KnownEventName.GPUTask, { category: EventCategory.Paint, label: 'GPU Task' }],
]);

